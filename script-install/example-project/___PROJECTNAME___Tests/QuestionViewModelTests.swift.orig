//  QuestionViewControllerTests.swift
//  ChesterfieldTests
//
//  Created by Håkon Bogen on 02/08/2018,31.
//  Copyright © 2018 Beining & Bogen. All rights reserved.
//

import XCTest
import ReactiveCocoa
import ReactiveSwift
import Result

@testable import ChesterfieldFramework
@testable import CFApi

class QuestionViewModelTests: XCTestCase {
    
    let goBack = TestObserver<Void, NoError>()
    let questionText = TestObserver<String, NoError>()
    let showAlternativesAtIndexes = TestObserver<[(Bool, Int)], NoError>()
    let alternativesText = TestObserver<[(Int, String)], NoError>()
    let vm = QuestionViewModel()

    override func setUp() {
        PseudoRandom.current = PseudoRandom()
        
        self.vm.outputs.goBack.observe(self.goBack.observer)
        self.vm.outputs.questionText.observe(self.questionText.observer)
        self.vm.outputs.showAlternativesAtIndexes.observe(self.showAlternativesAtIndexes.observer)
        self.vm.outputs.showAlternativeTexts.observe(self.alternativesText.observer)
    }

    func testGoBack() {
        vm.inputs.closeTapped()
        goBack.assertDidEmitValue()
    }
    
    func testDoNotShowQuestionBeforeViewDidLoad() {
        let subject = Subject.template
            |> (\Subject.themes) .~ [
                Theme.template
                    |> (\Theme.questions) .~ [Question.template]
                ]
        
        vm.inputs.configure(subject: subject)
        questionText.assertDidNotEmitValue()
    }
    
    func testShowQuestionAfterViewDidLoad() {
        let subject = Subject.template
            |> (\Subject.themes) .~ [
                Theme.template
                    |> (\Theme.questions) .~ [Question.template]
        ]
        
        vm.inputs.configure(subject: subject)
        vm.inputs.viewDidLoad()
        questionText.assertDidEmitValue()
    }
    
    func testShowAlternativeText() {    //denne må håndtere random
        let questionsWithAlternatives = [
            Question.template
                |> (\Question.alternatives) .~ [
                    Alternative.template
<<<<<<< HEAD
                        |> (\Alternative.name) .~ "test"
                        |> (\Alternative.alternativeId) .~ 0,
                    Alternative.template
                        |> (\Alternative.alternativeId) .~ 1
                        |> (\Alternative.name) .~ "test2",
                    Alternative.template
                        |> (\Alternative.alternativeId) .~ 2
                        |> (\Alternative.name) .~ "test3",
=======
                        |> (\Alternative.text) .~ "test"
                        |> (\Alternative.alternativeId) .~ 1,
                    Alternative.template
                        |> (\Alternative.alternativeId) .~ 2
                        |> (\Alternative.text) .~ "test2"
>>>>>>> aa52f06d7db6aa3c1b655c50782250a169baa5ce
                    ],
            Question.template
        ]
        
        let subject = Subject.template
            |> (\Subject.themes) .~ [
                Theme.template
                    |> (\Theme.questions) .~ questionsWithAlternatives
        ]
        
        User.current = User.template
        
        vm.inputs.configure(subject: subject)
        vm.inputs.viewDidLoad()
        
        XCTAssertEqual(alternativesText.lastValue?.first?.1, "test")
    }
    
    func testShowAlternativeForEveryIndex() {
        let questionsWithAlternatives = [
            Question.template
                |> (\Question.alternatives) .~ [
                    Alternative.template
                        |> (\Alternative.name) .~ "test"
                        |> (\Alternative.alternativeId) .~ 0,
                    Alternative.template
                        |> (\Alternative.alternativeId) .~ 1
                        |> (\Alternative.name) .~ "test2",
                    Alternative.template
                        |> (\Alternative.alternativeId) .~ 2
                        |> (\Alternative.name) .~ "test3",
            ],
            Question.template
        ]
        
        let subject = Subject.template
            |> (\Subject.themes) .~ [
                Theme.template
                    |> (\Theme.questions) .~ questionsWithAlternatives
        ]
        
<<<<<<< HEAD
        User.current = User.template
=======
        vm.inputs.configure(subject: subject)
        vm.inputs.viewDidLoad()
        XCTAssertEqual(alternativesList.lastValue?.count, 2)
    }*/
    
    func testShowAlternativeForEveryIndex() {
        
        let question = Question.template
            |> (\Question.alternatives) .~ [
                Alternative.template
                    |> (\Alternative.text) .~ "test",
                Alternative.template,
                Alternative.template
                    |> (\Alternative.alternativeId) .~ 93
                    |> (\Alternative.text) .~ "test2"
        ]
>>>>>>> aa52f06d7db6aa3c1b655c50782250a169baa5ce
        
        vm.inputs.configure(subject: subject)
        vm.inputs.viewDidLoad()
        vm.inputs.alternativeTapped(index: 0)
        
        let arr = showAlternativesAtIndexes.lastValue
        let sortedArr = arr?.sorted(by: {$0.1 < $1.1})  //We sort because indexes are shuffled.
        
        /*XCTAssertTrue(sortedArr![0].0)
        XCTAssertFalse(sortedArr![1].0)
        XCTAssertFalse(sortedArr![2].0)*/
    }

    // TODO: show a new question after tapping "show next question" button
    func testShowNewQuestionAfterTappingNextButton() {
        //make 2 questions
        let questions = [
            Question.template
                |> (\Question.alternatives) .~ [Alternative.template, Alternative.template]
                |> (\Question.text) .~ "test",
            Question.template
                |> (\Question.text) .~ "test2"
        ]
        
        //pick alternative
        
        //tap next button
        
        //assert the second question
        //questionText.assertLastValue(questions[1].text)
    }
    
    // TODO: show new alternatives after tapping "show next question" button
    func showNewAlternativesAfterTappingNextButton() {
        //make 2 questions
        let questions = [
            Question.template
                |> (\Question.alternatives) .~ [Alternative.template, Alternative.template]
                |> (\Question.text) .~ "test",
            Question.template
                |> (\Question.text) .~ "test2"
                |> (\Question.alternatives) .~ [Alternative.template, Alternative.template
                    |> (\Alternative.text) .~ "testAlt2"
            ]
        ]
        
        //Pick alternative
        
        //Tap next button
        
        //Assert the second alternative
    }
    
    func testAnswerQuestions() {
        /*PseudoRandom.current = MockRandomizer.init(randomNumbers: [0, 1, 2])
        
        let subject = Subject.template
            |> (\Subject.themes) .~ [
                Theme.template
                    |> (\Theme.questions) .~ [
                        Question.template
                            |> (\Question.questionId) .~ 0
                            |> (\Question.alternatives) .~ [
                                Alternative.template
                                    |> (\Alternative.alternativeId) .~ 88,
                                Alternative.template
                        ],
                        Question.template
                            |> (\Question.questionId) .~ 1
                            |> (\Question.alternatives) .~ [
                                Alternative.template
                                    |> (\Alternative.alternativeId) .~ 99,
                                Alternative.template
                        ],
                        Question.template
                            |> (\Question.questionId) .~ 2
                            |> (\Question.alternatives) .~ [
                                Alternative.template
                                    |> (\Alternative.alternativeId) .~ 100,
                                Alternative.template
                        ]
                ]
        ]
        
        User.current = User.template
        
        vm.inputs.configure(subject: subject)
        vm.inputs.viewDidLoad()
        vm.inputs.alternativeTapped(alternativeId: 88)
        
        let firstAnswer = User.current!.answer(byId: 0)
        XCTAssertNotNil(firstAnswer)
        
        vm.inputs.nextTapped()

        vm.inputs.alternativeTapped(alternativeId: 99)
        
        let secondAnswer = User.current!.answer(byId: 1)
        XCTAssertNotNil(secondAnswer)*/
    }
}
